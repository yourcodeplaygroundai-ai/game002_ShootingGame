import pygame           # generated by Grok
import random
import sys
import math

# -------------------------------------------------
# Initialise Pygame
# -------------------------------------------------
pygame.init()

# -------------------------------------------------
# Screen settings
# -------------------------------------------------
SCREEN_WIDTH = 1920
SCREEN_HEIGHT = 1024
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Jet Fighter vs Cartoon Animals")

# -------------------------------------------------
# Clock & FPS
# -------------------------------------------------
clock = pygame.time.Clock()
FPS = 60

# -------------------------------------------------
# Colours
# -------------------------------------------------
SKY_BLUE = (135, 206, 235)
GREEN = (34, 139, 34)
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (220, 20, 60)
YELLOW = (255, 215, 0)
GRAY = (180, 180, 180)

# -------------------------------------------------
# Fonts
# -------------------------------------------------
font_large = pygame.font.SysFont('comicsans', 80, bold=True)
font_medium = pygame.font.SysFont('comicsans', 50)
font_small = pygame.font.SysFont('comicsans', 36)

# -------------------------------------------------
# PLAYER â€“ Cartoon Jet Plane
# -------------------------------------------------
class JetPlane(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.base_speed = 7
        self.speed = self.base_speed
        self.image = pygame.Surface((100, 60), pygame.SRCALPHA)
        self.draw_jet()
        self.rect = self.image.get_rect()
        self.rect.centerx = SCREEN_WIDTH // 5
        self.rect.centery = SCREEN_HEIGHT // 2
        self.score = 0
        self.speed_boosted = False

    def draw_jet(self):
        # Jet body
        pygame.draw.polygon(self.image, GRAY, [(20, 30), (80, 20), (90, 30), (80, 40)])
        # Wings
        pygame.draw.polygon(self.image, (100, 100, 100), [(30, 15), (50, 15), (45, 5), (35, 5)])
        pygame.draw.polygon(self.image, (100, 100, 100), [(30, 45), (50, 45), (45, 55), (35, 55)])
        # Cockpit
        pygame.draw.ellipse(self.image, (50, 150, 255), (55, 25, 25, 15))
        # Engine fire
        pygame.draw.ellipse(self.image, RED, (10, 25, 15, 10))
        pygame.draw.ellipse(self.image, YELLOW, (8, 26, 10, 8))
        # Cartoon eyes
        pygame.draw.circle(self.image, WHITE, (70, 28), 6)
        pygame.draw.circle(self.image, BLACK, (72, 28), 3)
        pygame.draw.circle(self.image, WHITE, (80, 28), 6)
        pygame.draw.circle(self.image, BLACK, (82, 28), 3)

    def update(self):
        keys = pygame.key.get_pressed()
        if keys[pygame.K_UP]:
            self.rect.y -= self.speed
        if keys[pygame.K_DOWN]:
            self.rect.y += self.speed
        if keys[pygame.K_LEFT]:
            self.rect.x -= self.speed
        if keys[pygame.K_RIGHT]:
            self.rect.x += self.speed

        # Keep inside screen
        self.rect.x = max(0, min(self.rect.x, SCREEN_WIDTH - self.rect.width))
        self.rect.y = max(0, min(self.rect.y, SCREEN_HEIGHT - self.rect.height))

        # Speed boost after 5 points
        if self.score >= 5 and not self.speed_boosted:
            self.speed = int(self.base_speed * 1.5)
            self.speed_boosted = True

    def shoot(self):
        bullet = Bullet(self.rect.right, self.rect.centery)
        all_sprites.add(bullet)
        bullets.add(bullet)


# -------------------------------------------------
# BULLET
# -------------------------------------------------
class Bullet(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = pygame.Surface((20, 6))
        self.image.fill(YELLOW)
        pygame.draw.ellipse(self.image, RED, (0, 0, 20, 6))
        self.rect = self.image.get_rect()
        self.rect.left = x
        self.rect.centery = y
        self.speed = 20

    def update(self):
        self.rect.x += self.speed
        if self.rect.left > SCREEN_WIDTH:
            self.kill()


# -------------------------------------------------
# BASE ANIMAL CLASS
# -------------------------------------------------
class Animal(pygame.sprite.Sprite):
    def __init__(self, color, size, speed, score_value=1):
        super().__init__()
        self.color = color
        self.size = size
        self.speed = speed
        self.score_value = score_value
        self.image = pygame.Surface(size, pygame.SRCALPHA)
        self.draw_cartoon()
        self.rect = self.image.get_rect()
        self.spawn_offscreen()

    def spawn_offscreen(self):
        side = random.choice(['left', 'right', 'top', 'bottom'])
        if side == 'left':
            self.rect.x = -self.rect.width
            self.rect.y = random.randint(100, SCREEN_HEIGHT - 200)
        elif side == 'right':
            self.rect.x = SCREEN_WIDTH
            self.rect.y = random.randint(100, SCREEN_HEIGHT - 200)
        elif side == 'top':
            self.rect.x = random.randint(200, SCREEN_WIDTH - 200)
            self.rect.y = -self.rect.height
        else:  # bottom
            self.rect.x = random.randint(200, SCREEN_WIDTH - 200)
            self.rect.y = SCREEN_HEIGHT

    def update(self):
        # Homing movement
        dx = player.rect.centerx - self.rect.centerx
        dy = player.rect.centery - self.rect.centery
        dist = math.hypot(dx, dy)
        if dist > 0:
            dx /= dist
            dy /= dist
            self.rect.x += dx * self.speed
            self.rect.y += dy * self.speed

        # Remove if it flies off left side
        if self.rect.right < 0:
            self.kill()

    def draw_cartoon(self):
        raise NotImplementedError


# -------------------------------------------------
# TIGER
# -------------------------------------------------
class Tiger(Animal):
    def __init__(self):
        super().__init__((255, 150, 0), (90, 70), random.uniform(2.5, 4.0), score_value=1)

    def draw_cartoon(self):
        # Body
        pygame.draw.ellipse(self.image, self.color, (15, 20, 60, 40))
        # Head
        pygame.draw.circle(self.image, self.color, (65, 35), 25)
        # Ears
        pygame.draw.polygon(self.image, self.color, [(50, 15), (55, 10), (60, 15)])
        pygame.draw.polygon(self.image, self.color, [(70, 15), (75, 10), (80, 15)])
        # Stripes
        for x in [25, 40, 55, 70]:
            pygame.draw.line(self.image, BLACK, (x, 25), (x, 55), 3)
        # Eyes
        pygame.draw.circle(self.image, WHITE, (58, 30), 6)
        pygame.draw.circle(self.image, BLACK, (60, 30), 3)
        pygame.draw.circle(self.image, WHITE, (72, 30), 6)
        pygame.draw.circle(self.image, BLACK, (74, 30), 3)
        # Nose
        pygame.draw.polygon(self.image, (255, 100, 100), [(65, 40), (70, 40), (67, 45)])
        # Tail
        pygame.draw.line(self.image, self.color, (15, 40), (0, 50), 8)


# -------------------------------------------------
# CAT
# -------------------------------------------------
class Cat(Animal):
    def __init__(self):
        super().__init__((200, 200, 200), (70, 60), random.uniform(3.0, 5.0), score_value=1)

    def draw_cartoon(self):
        # Body
        pygame.draw.ellipse(self.image, self.color, (10, 20, 50, 35))
        # Head
        pygame.draw.circle(self.image, self.color, (50, 25), 22)
        # Ears
        pygame.draw.polygon(self.image, self.color, [(38, 8), (42, 3), (46, 8)])
        pygame.draw.polygon(self.image, self.color, [(54, 8), (58, 3), (62, 8)])
        # Eyes
        pygame.draw.circle(self.image, (0, 255, 0), (44, 22), 6)
        pygame.draw.circle(self.image, BLACK, (44, 22), 3)
        pygame.draw.circle(self.image, (0, 255, 0), (56, 22), 6)
        pygame.draw.circle(self.image, BLACK, (56, 22), 3)
        # Nose
        pygame.draw.polygon(self.image, (255, 100, 150), [(50, 30), (48, 33), (52, 33)])
        # Whiskers
        for dx in [-15, -10]:
            pygame.draw.line(self.image, BLACK, (35, 28), (35 + dx, 26), 2)
            pygame.draw.line(self.image, BLACK, (35, 32), (35 + dx, 32), 2)
        for dx in [15, 10]:
            pygame.draw.line(self.image, BLACK, (65, 28), (65 + dx, 26), 2)
            pygame.draw.line(self.image, BLACK, (65, 32), (65 + dx, 32), 2)
        # Tail
        pygame.draw.line(self.image, self.color, (10, 35), (0, 45), 6)


# -------------------------------------------------
# SPIDER
# -------------------------------------------------
class Spider(Animal):
    def __init__(self):
        super().__init__((50, 50, 50), (60, 60), random.uniform(3.5, 6.0), score_value=2)

    def draw_cartoon(self):
        # Body
        pygame.draw.ellipse(self.image, self.color, (15, 15, 30, 35))
        # Head
        pygame.draw.circle(self.image, self.color, (45, 25), 16)
        # 8 eyes
        for angle in range(0, 360, 45):
            ex = 45 + 10 * math.cos(math.radians(angle))
            ey = 25 + 8 * math.sin(math.radians(angle))
            pygame.draw.circle(self.image, RED, (int(ex), int(ey)), 3)
        # Legs
        leg_color = (30, 30, 30)
        legs = [
            ((20, 20), (5, 5)), ((20, 25), (5, 15)), ((20, 35), (5, 45)), ((20, 40), (5, 55)),
            ((40, 20), (55, 5)), ((40, 25), (55, 15)), ((40, 35), (55, 45)), ((40, 40), (55, 55))
        ]
        for start, end in legs:
            pygame.draw.line(self.image, leg_color, start, end, 4)


# -------------------------------------------------
# Sprite groups
# -------------------------------------------------
all_sprites = pygame.sprite.Group()
bullets = pygame.sprite.Group()
animals = pygame.sprite.Group()

# -------------------------------------------------
# Create player
# -------------------------------------------------
player = JetPlane()
all_sprites.add(player)

# -------------------------------------------------
# Background clouds
# -------------------------------------------------
clouds = []
for _ in range(12):
    clouds.append({
        'x': random.randint(0, SCREEN_WIDTH + 500),
        'y': random.randint(50, 300),
        'speed': random.uniform(0.8, 2.0)
    })

# -------------------------------------------------
# Game state
# -------------------------------------------------
game_over = False
spawn_timer = 0

# -------------------------------------------------
# MAIN LOOP
# -------------------------------------------------
running = True
while running:
    clock.tick(FPS)

    # -----------------------------------------------------------------
    # EVENT HANDLING (always processed)
    # -----------------------------------------------------------------
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        if event.type == pygame.KEYDOWN:
            # Shoot only while playing
            if not game_over and event.key == pygame.K_SPACE:
                player.shoot()

            # Restart when game over
            if game_over and event.key == pygame.K_r:
                # ---- RESET EVERYTHING ----
                player = JetPlane()
                all_sprites.empty()
                bullets.empty()
                animals.empty()
                all_sprites.add(player)

                game_over = False
                spawn_timer = 0

                # Reset clouds to the right side
                for cloud in clouds:
                    cloud['x'] = random.randint(SCREEN_WIDTH, SCREEN_WIDTH + 800)

    # -----------------------------------------------------------------
    # GAME LOGIC (only when not game over)
    # -----------------------------------------------------------------
    if not game_over:
        # ---- Spawn enemies ----
        spawn_timer += 1
        if spawn_timer > 90:          # every 1.5 s
            spawn_timer = 0
            animal_class = random.choice([Tiger, Cat, Spider])
            animal = animal_class()
            all_sprites.add(animal)
            animals.add(animal)

        # ---- Update all sprites ----
        all_sprites.update()

        # ---- Bullet â†’ Animal collisions ----
        for bullet in bullets:
            hits = pygame.sprite.spritecollide(bullet, animals, True)
            for hit in hits:
                bullet.kill()
                player.score += hit.score_value

        # ---- Player â†’ Animal collision (game over) ----
        if pygame.sprite.spritecollideany(player, animals):
            game_over = True

        # ---- Move clouds (parallax) ----
        for cloud in clouds:
            cloud['x'] -= cloud['speed']
            if cloud['x'] < -200:
                cloud['x'] = SCREEN_WIDTH + random.randint(200, 600)
                cloud['y'] = random.randint(50, 300)

    else:
        # Optional: slowly drift clouds even on game-over screen
        for cloud in clouds:
            cloud['x'] -= cloud['speed'] * 0.5
            if cloud['x'] < -200:
                cloud['x'] = SCREEN_WIDTH + random.randint(200, 600)

    # -----------------------------------------------------------------
    # DRAWING
    # -----------------------------------------------------------------
    screen.fill(SKY_BLUE)

    # Clouds
    for cloud in clouds:
        pygame.draw.ellipse(screen, WHITE, (cloud['x'], cloud['y'], 140, 70))
        pygame.draw.ellipse(screen, WHITE, (cloud['x'] + 50, cloud['y'] - 20, 90, 60))

    # Ground
    pygame.draw.rect(screen, GREEN, (0, SCREEN_HEIGHT - 120, SCREEN_WIDTH, 120))

    # Grass tufts
    for x in range(0, SCREEN_WIDTH, 80):
        for _ in range(5):
            gx = x + random.randint(-30, 30)
            gy = SCREEN_HEIGHT - 120
            pygame.draw.line(screen, (0, 150, 0),
                             (gx, gy),
                             (gx + random.randint(-8, 8), gy - random.randint(15, 35)), 3)

    # Sprites
    all_sprites.draw(screen)

    # HUD
    score_text = font_medium.render(f"Score: {player.score}", True, YELLOW)
    screen.blit(score_text, (50, 50))

    if player.speed_boosted:
        boost_text = font_small.render("SPEED BOOST! (x1.5)", True, RED)
        screen.blit(boost_text, (50, 110))

    if not game_over:
        inst = font_small.render("Arrow Keys: Move | SPACE: Shoot", True, WHITE)
        screen.blit(inst, (SCREEN_WIDTH // 2 - 250, 50))

    # GAME OVER overlay
    if game_over:
        overlay = pygame.Surface((SCREEN_WIDTH, SCREEN_HEIGHT))
        overlay.set_alpha(180)
        overlay.fill(BLACK)
        screen.blit(overlay, (0, 0))

        go_text = font_large.render("GAME OVER", True, RED)
        screen.blit(go_text, (SCREEN_WIDTH // 2 - 280, SCREEN_HEIGHT // 3))

        final_score = font_medium.render(f"Final Score: {player.score}", True, YELLOW)
        screen.blit(final_score, (SCREEN_WIDTH // 2 - 220, SCREEN_HEIGHT // 2))

        restart_text = font_medium.render("Press R to Restart", True, WHITE)
        screen.blit(restart_text, (SCREEN_WIDTH // 2 - 260, SCREEN_HEIGHT // 2 + 100))

    pygame.display.flip()

# -------------------------------------------------
# Clean exit
# -------------------------------------------------
pygame.quit()
sys.exit()